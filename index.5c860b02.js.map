{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SCAAC,EAAAD,EAAA,S,oDCAAE,GCAAC,EAAAH,EAAA,SDAAA,EAAA,U,wDA4DAI,EAlDAC,eAAkCC,EAAOC,GAC1B,IAATA,IACFJ,EAAAK,QAAQC,UAAY,GCgBtBN,EAAAO,WAAWC,mBAAqB,IDbhC,EAAAC,EAAAC,SAAOV,EAAAW,QACP,IACE,MAAMC,QAAiB,EAAAd,EAAAe,WAAU,eAAgB,CAC/CV,MAAOA,EAAMW,M,KACbV,IAEIW,EAAUH,EAASI,KAAKD,QACxBE,EAAaL,EAASI,KAAKE,YACjC,IAAKH,EAAQI,OASX,OARApB,EAAAqB,OAAOC,KAAK,GAAGlB,EAAMW,kCAAmC,CACtDQ,SAAU,aACVC,SAAU,OACVF,KAAM,CACJG,UAAW,eAGfxB,EAAAyB,gBAAgBC,iBAAiBZ,MAAQ,IAG3C,GAAIV,EAAOa,EAQT,YAPAlB,EAAAqB,OAAOC,KAAK,mBAAoB,CAC9BC,SAAU,aACVC,SAAU,OACVF,KAAM,CACJG,UAAW,UAMjB,MAAMG,GAAS,EAAAC,EAAAlB,SAA8BK,GAC7Cf,EAAAK,QAAQwB,mBAAmB,YAAaF,GAExC,MAAMG,EAAWC,SAASC,cAAc,0BACpCF,GACFG,EAA4BC,QAAQJ,E,CAEtC,MAAOK,GAEP,OADAC,QAAQC,IAAI,QAASF,GACd,I,CACR,SACC,EAAA1B,EAAAC,SAAOV,EAAAW,O,GCpDJ,MAAM2B,EAA6B,IAAIC,sBAC5C,CAACC,EAASC,KACRD,EAAQE,SAAQC,IACVA,EAAMC,iBACRH,EAASI,UAAUF,EAAMG,QACzB9C,EAAAO,WAAWC,oBAAsB,EACjCuC,EAAqB/C,EAAAO,WAAWC,oB,GAElC,IAGOyB,EAA8B,IAAIM,sBAC7C,CAACC,EAASC,KACRD,EAAQE,SAAQC,IACVA,EAAMC,iBACRH,EAASI,UAAUF,EAAMG,QACzB9C,EAAAO,WAAWC,oBAAsB,EACjCP,EAAmBD,EAAAgD,WAAYhD,EAAAO,WAAWC,oB,GAE5C,I,IFINuC,EApBA7C,eAAoCE,EAAO,IACzC,EAAAK,EAAAC,SAAOV,EAAAW,QACP,IACE,MAAMC,QAAiB,EAAAd,EAAAe,WAAU,qBAAsB,CAAET,KAAMA,IACzDuB,GAAS,EAAAC,EAAAlB,SAA8BE,EAASI,KAAKD,SAC3Df,EAAAK,QAAQwB,mBAAmB,YAAaF,GACxC3B,EAAAK,QAAQ4C,iBAAiB,QAASC,EAAAxC,SAElC,MAAMoB,EAAWC,SAASC,cAAc,0BACpCF,GACFQ,EAA2BJ,QAAQJ,E,CAErC,MAAOK,GAEP,OADAC,QAAQC,IAAI,QAASF,GACd,I,CACR,SACC,EAAA1B,EAAAC,SAAOV,EAAAW,O,4CGvBXZ,EAAAF,EAAA,S,iBAeAsD,EAXA,SAAiCC,GAC/BA,EAAEC,iBAEFrD,EAAAgD,WAAWlC,MAAQsC,EAAEN,OAAOpB,iBAAiBZ,MAAMwC,OAC9CtD,EAAAgD,WAAWlC,MAIhBb,EAAmBD,EAAAgD,WAAY,GAH7BjD,EAAAqB,OAAOC,KAAK,uB,gBJDhB,EAAAkC,EAAAC,uBAEAC,OAAOR,iBAAiB,oBAAoB/C,UAC1C,IACEwD,OAAOC,OAAO3D,EAAA4D,aAAc,EAAAC,EAAAnD,YAC5BqC,IAEA/C,EAAAyB,gBAAgBwB,iBAAiB,SAAUE,GAC3CpB,SAAS+B,KAAKb,iBAAiB,SAAUc,EAAAnE,EAAA,CAASoE,EAAAtD,QAAc,MAChEV,EAAAiE,eAAehB,iBAAiB,QAASM,EAAAW,YAIjC,CAHR,MAAO/B,GAEP,OADAC,QAAQC,IAAI,QAASF,GACd,I,CACC","sources":["src/js/home.js","src/js/render/renderTrendingMovies.js","src/js/render/renderSearchMovies.js","src/js/infiniteScroll.js","src/js/onSubmitSearchMovieForm.js"],"sourcesContent":["import throttle from 'lodash.throttle';\nimport renderTrendingMovies from './render/renderTrendingMovies';\nimport handleScroll from './toTopBtn';\nimport { genres, searchMovieForm, toggleThemeBtn } from './refs';\nimport { setThemeFirstRender, toggleTheme } from './theme';\nimport onSubmitSearchMovieForm from './onSubmitSearchMovieForm';\nimport getAllGenres from './getAllGenres';\n\nsetThemeFirstRender();\n\nwindow.addEventListener('DOMContentLoaded', async () => {\n  try {\n    Object.assign(genres, await getAllGenres());\n    renderTrendingMovies();\n\n    searchMovieForm.addEventListener('submit', onSubmitSearchMovieForm);\n    document.body.addEventListener('scroll', throttle(handleScroll, 500));\n    toggleThemeBtn.addEventListener('click', toggleTheme);\n  } catch (error) {\n    console.log('Error', error);\n    return null;\n  } finally {\n  }\n});\n","import { getMovies } from '../api';\nimport { gallery, loader } from '../refs';\nimport toggle from '../toggle';\nimport createMarkupGalleryMoviesCard from '../markup/createMarkupGalleryMoviesCard';\nimport renderMovieFullInfo from './renderMovieFullInfo';\nimport { observerGalleryTrendMovies } from '../infiniteScroll';\n\nasync function renderTrendingMovies(page = 1) {\n  toggle(loader);\n  try {\n    const response = await getMovies(`trending/movie/day`, { page: page });\n    const markup = createMarkupGalleryMoviesCard(response.data.results);\n    gallery.insertAdjacentHTML('beforeend', markup);\n    gallery.addEventListener('click', renderMovieFullInfo);\n\n    const lastCard = document.querySelector('.movie-card:last-child');\n    if (lastCard) {\n      observerGalleryTrendMovies.observe(lastCard);\n    }\n  } catch (error) {\n    console.log('Error', error);\n    return null;\n  } finally {\n    toggle(loader);\n  }\n}\n\nexport default renderTrendingMovies;\n","import { Notify } from 'notiflix';\nimport { getMovies } from '../api';\nimport { gallery, loader, searchMovieForm } from '../refs';\nimport toggle from '../toggle';\nimport createMarkupGalleryMoviesCard from '../markup/createMarkupGalleryMoviesCard';\nimport {\n  observerGallerySearchMovies,\n  resetNextPagePagination,\n} from '../infiniteScroll';\n\nasync function renderSearchMovies(query, page) {\n  if (page === 1) {\n    gallery.innerHTML = '';\n    resetNextPagePagination();\n  }\n  toggle(loader);\n  try {\n    const response = await getMovies('search/movie', {\n      query: query.value,\n      page,\n    });\n    const results = response.data.results;\n    const totalPages = response.data.total_pages;\n    if (!results.length) {\n      Notify.info(`${query.value} nothing found. Try again.`, {\n        position: 'center-top',\n        fontSize: '16px',\n        info: {\n          textColor: '#000',\n        },\n      });\n      searchMovieForm.searchMovieQuery.value = '';\n      return;\n    }\n    if (page > totalPages) {\n      Notify.info(`It was last page`, {\n        position: 'center-top',\n        fontSize: '16px',\n        info: {\n          textColor: '#000',\n        },\n      });\n      return;\n    }\n\n    const markup = createMarkupGalleryMoviesCard(results);\n    gallery.insertAdjacentHTML('beforeend', markup);\n\n    const lastCard = document.querySelector('.movie-card:last-child');\n    if (lastCard) {\n      observerGallerySearchMovies.observe(lastCard);\n    }\n  } catch (error) {\n    console.log('Error', error);\n    return null;\n  } finally {\n    toggle(loader);\n  }\n}\n\nexport default renderSearchMovies;\n","import { pagination, queryMovie } from './refs';\nimport renderSearchMovies from './render/renderSearchMovies';\nimport renderTrendingMovies from './render/renderTrendingMovies';\n\nexport const observerGalleryTrendMovies = new IntersectionObserver(\n  (entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        observer.unobserve(entry.target);\n        pagination.nextPagePagination += 1;\n        renderTrendingMovies(pagination.nextPagePagination);\n      }\n    });\n  }\n);\nexport const observerGallerySearchMovies = new IntersectionObserver(\n  (entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        observer.unobserve(entry.target);\n        pagination.nextPagePagination += 1;\n        renderSearchMovies(queryMovie, pagination.nextPagePagination);\n      }\n    });\n  }\n);\n\nexport function resetNextPagePagination() {\n  pagination.nextPagePagination = 1;\n}\n","import { Notify } from 'notiflix';\nimport renderSearchMovies from './render/renderSearchMovies';\nimport { queryMovie } from './refs';\n\nfunction onSubmitSearchMovieForm(e) {\n  e.preventDefault();\n\n  queryMovie.value = e.target.searchMovieQuery.value.trim();\n  if (!queryMovie.value) {\n    Notify.info('Please enter request');\n    return;\n  }\n  renderSearchMovies(queryMovie, 1);\n}\n\nexport default onSubmitSearchMovieForm;\n"],"names":["$9OeKo","parcelRequire","$7rYDH","$7Y9D8","$krGWQ","$740abe515043fb87$export$2e2bcd8739ae039","async","query","page","gallery","innerHTML","pagination","nextPagePagination","$6ZObK","default","loader","response","getMovies","value","results","data","totalPages","total_pages","length","Notify","info","position","fontSize","textColor","searchMovieForm","searchMovieQuery","markup","$aLPhN","insertAdjacentHTML","lastCard","document","querySelector","$bf358a55e5e85b86$export$cd39ae8a5da59201","observe","error","console","log","$bf358a55e5e85b86$export$223c31cbeac42de7","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","target","$ffcaa678058365c5$export$2e2bcd8739ae039","queryMovie","addEventListener","$boduE","$20d61bcb2076a5c6$export$2e2bcd8739ae039","e","preventDefault","trim","$4S0r6","setThemeFirstRender","window","Object","assign","genres","$aomY9","body","$parcel$interopDefault","$hkaSy","toggleThemeBtn","toggleTheme"],"version":3,"file":"index.5c860b02.js.map"}